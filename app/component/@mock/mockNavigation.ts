export const navigation = {
    "code": "function Navigation_06({\n  logo = 'https://cdn.wegic.ai/assets/onepage/thread/icon/default.png',\n  navItems = [\n    'text=Home&link=/home',\n    'text=About&link=/about',\n    'text=Service&link=/service',\n    'text=Case&link=/case',\n    'text=Blog&link=/blog',\n    'text=Contact&link=/contact',\n    'text=Location&link=/location',\n    'text=Map&link=/map',\n  ],\n  primaryButton = {\n    icon: 'fa-solid fa-arrow-right',\n    textAttr: 'Contact us',\n    textColor: 'white',\n  },\n  secondaryButton,\n  fixedTop = false,\n  logoSize = 40,\n  showButton = true,\n  maxCount = 7,\n}) {\n  const NAV_GAP = React.useMemo(() => 64, []);\n  const LOGO_MAX_WIDTH = React.useMemo(() => 300, []);\n  const MOBILE_WIDTH = React.useMemo(() => 768, []);\n  const MIN_PAGE_WIDTH = React.useMemo(() => 300, []);\n  const viewportId = React.useMemo(() => window?.siteEngine?.scrollContainerId || 'preview-viewport', []);\n  const [viewportHeight, setViewportHeight] = React.useState(0);\n  const [mobileMode, setMobileMode] = React.useState(false);\n  const [hidden, setHidden] = React.useState(false);\n  const moreButtonRef = React.useRef(null);\n  const [moreListVisible, setMoreListVisible] = React.useState(false);\n  const mobileListRef = React.useRef(null);\n  const [mobileListVisible, setMobileListVisible] = React.useState(false);\n  const [mobileEntryVisible, setMobileEntryVisible] = React.useState(false);\n  const lastScrollTopRef = React.useRef(0);\n  const buttonVisible = showButton && (secondaryButton || primaryButton);\n  const layoutObject = React.useMemo(() => {\n    const layout = {\n      logoSize: 0,\n      navHeight: 0,\n      buttonHeight: 0,\n      buttonPX: 0,\n      fontSize: 0,\n      dropDownHeight: 0,\n      dropDownPaddingLeft: 0,\n      dropDownPaddingRight: 0,\n      mobileNavHeight: 56,\n      mobileNavItemHeight: 56,\n      mobileFontSize: 14,\n      mobileIconSize: 20,\n    };\n\n    if (logoSize < 48) {\n      layout.fontSize = 14;\n      layout.dropDownHeight = 48;\n      layout.dropDownPaddingLeft = 12;\n      layout.dropDownPaddingRight = 48;\n    } else if (logoSize >= 48 && logoSize < 64) {\n      layout.fontSize = 15;\n      layout.dropDownHeight = 64;\n      layout.dropDownPaddingLeft = 20;\n      layout.dropDownPaddingRight = 80;\n    } else if (logoSize >= 64) {\n      layout.fontSize = 16;\n      layout.dropDownHeight = 64;\n      layout.dropDownPaddingLeft = 20;\n      layout.dropDownPaddingRight = 80;\n    }\n\n    if (mobileMode) {\n      if (logoSize < 56) {\n        layout.logoSize = 32;\n        layout.mobileNavHeight = 56;\n        layout.mobileFontSize = 14;\n        layout.mobileIconSize = 20;\n      } else {\n        layout.logoSize = 48;\n        layout.mobileNavHeight = 72;\n        layout.mobileFontSize = 16;\n        layout.mobileIconSize = 24;\n      }\n    } else {\n      layout.logoSize = logoSize;\n      if (logoSize < 56) {\n        layout.navHeight = logoSize + 24;\n      } else if (logoSize >= 56 && logoSize < 64) {\n        layout.navHeight = logoSize + 40;\n      } else {\n        layout.navHeight = 120;\n      }\n    }\n\n    /** button */\n    if (logoSize < 48) {\n      layout.buttonHeight = 40;\n      layout.buttonPX = 20;\n    } else if (logoSize >= 48 && logoSize < 56) {\n      layout.buttonHeight = 48;\n      layout.buttonPX = 20;\n    } else {\n      layout.buttonHeight = 56;\n      layout.buttonPX = 28;\n    }\n\n    return layout;\n  }, [logoSize, mobileMode]);\n  const [isOverWidthLogo, setIsOverWidthLogo] = React.useState(false);\n  const logoRectRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n  const logoRef = React.useRef(null);\n  const buttonContainerRef = React.useRef(null);\n  const [pageWidth, setPageWidth] = React.useState(0);\n  const [minPageWidth, setMinPageWidth] = React.useState(MIN_PAGE_WIDTH);\n  const [skeletonMinWidth, setSkeletonMinWidth] = React.useState(MIN_PAGE_WIDTH);\n  const [logoWidth, setLogoWidth] = React.useState(0);\n  const [buttonContainerWidth, setButtonContainerWidth] = React.useState(0);\n  const [minLimit, setMinLimit] = React.useState(false);\n  const [leftLimit, setLeftLimit] = React.useState(false);\n  const [rightLimit, setRightLimit] = React.useState(false);\n  const center = React.useMemo(() => !leftLimit && !rightLimit, [leftLimit, rightLimit]);\n\n  const handlePageWidthUpdate = React.useCallback(() => {\n    if (mobileMode || !logoWidth) {\n      return;\n    }\n    const contentWidth = contentRef.current?.clientWidth || 0;\n    const leftRestWidth = contentWidth / 2 - logoWidth - NAV_GAP;\n    const rightRestWidth = contentWidth / 2 - buttonContainerWidth - NAV_GAP;\n    const pageItemWidth = Math.max(Math.min(leftRestWidth, rightRestWidth) * 2, minPageWidth);\n    const newMinLimit = logoWidth + NAV_GAP + minPageWidth + NAV_GAP + buttonContainerWidth > contentWidth;\n\n    const newSkeletonMinWidth = newMinLimit ? minPageWidth : Math.max(contentWidth - logoWidth - buttonContainerWidth - NAV_GAP * 2, minPageWidth);\n\n    const leftLimit = contentWidth / 2 - logoWidth - NAV_GAP < minPageWidth / 2;\n    const rightLimit = contentWidth / 2 - buttonContainerWidth - NAV_GAP < minPageWidth / 2;\n    setLeftLimit(leftLimit);\n    setRightLimit(rightLimit);\n    setMinLimit(newMinLimit);\n    setPageWidth(pageItemWidth);\n    setSkeletonMinWidth(newSkeletonMinWidth);\n  }, [minPageWidth, mobileMode, logoWidth, buttonContainerWidth]);\n\n  React.useEffect(() => {\n    handlePageWidthUpdate();\n  }, [logoSize, isOverWidthLogo, navItems, showButton, primaryButton, secondaryButton, handlePageWidthUpdate]);\n\n  React.useEffect(() => {\n    setMinPageWidth(MIN_PAGE_WIDTH);\n  }, [navItems]);\n\n  /** navigation ResizeObserver start */\n  const handleViewportWidthChange = React.useCallback(\n    throttle((entries) => {\n      const entry = entries[0];\n      const rect = entry.contentRect;\n      setViewportHeight(rect.height);\n      if (rect.width > MOBILE_WIDTH) {\n        mobileMode && setMobileMode(false);\n        handlePageWidthUpdate();\n      } else {\n        !mobileMode && setMobileMode(true);\n      }\n    }, 32),\n    [mobileMode, handlePageWidthUpdate]\n  );\n\n  React.useEffect(() => {\n    const scrollDom = document.getElementById(viewportId);\n    const observer = new ResizeObserver(handleViewportWidthChange);\n    observer.observe(scrollDom);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [viewportId, handleViewportWidthChange]);\n  /** navigation ResizeObserver end */\n\n  /** logo ResizeObserver start */\n  const handleLogoWidthChange = React.useCallback(\n    throttle((entries) => {\n      const entry = entries[0];\n      const rect = entry.contentRect;\n      rect.width && setLogoWidth(rect.width);\n    }, 32),\n    []\n  );\n\n  React.useEffect(() => {\n    if (!logoRef.current || mobileMode) {\n      return;\n    }\n    const observer = new ResizeObserver(handleLogoWidthChange);\n    observer.observe(logoRef.current);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [mobileMode, handleLogoWidthChange]);\n  /** logo ResizeObserver end */\n\n  /** button ResizeObserver start */\n  const handleButtonWidthChange = React.useCallback(\n    throttle((entries) => {\n      const entry = entries[0];\n      const rect = entry.contentRect;\n      rect.width && setButtonContainerWidth(rect.width);\n    }, 32),\n    []\n  );\n\n  React.useEffect(() => {\n    if (!buttonContainerRef.current || mobileMode || minLimit || !buttonVisible) {\n      return;\n    }\n    const observer = new ResizeObserver(handleButtonWidthChange);\n    observer.observe(buttonContainerRef.current);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [mobileMode, handleButtonWidthChange, minLimit, buttonVisible]);\n  /** button ResizeObserver end */\n\n  React.useEffect(() => {\n    if (!mobileMode) {\n      setMobileListVisible(false);\n    } else {\n      setMoreListVisible(false);\n    }\n  }, [mobileMode]);\n\n  const handleCloseMoreList = (e) => {\n    if (moreButtonRef.current?.contains(e.target)) {\n      return;\n    }\n    if (moreListVisible) {\n      setMoreListVisible(false);\n    }\n  };\n\n  React.useEffect(() => {\n    moreListVisible && window.addEventListener('click', handleCloseMoreList);\n    return () => {\n      window.removeEventListener('click', handleCloseMoreList);\n    };\n  }, [moreListVisible]);\n\n  React.useEffect(() => {\n    const handleScroll = throttle((e) => {\n      if (fixedTop || !e.target) {\n        return;\n      }\n      if (mobileListVisible) {\n        setMobileListVisible(false);\n      }\n      const viewportHeight = window.innerHeight;\n      const scrollTop = e.target.scrollTop;\n      if (lastScrollTopRef.current < scrollTop) {\n        if (scrollTop >= viewportHeight / 2) {\n          !hidden && setHidden(true);\n        } else {\n          hidden && setHidden(false);\n        }\n      } else {\n        hidden && setHidden(false);\n      }\n      lastScrollTopRef.current = scrollTop;\n    }, 32);\n\n    let scrollContainer = window?.document.getElementById(viewportId);\n    scrollContainer?.addEventListener('scroll', handleScroll);\n    return () => {\n      scrollContainer?.removeEventListener('scroll', handleScroll);\n    };\n  }, [hidden, fixedTop, mobileListVisible]);\n\n  React.useEffect(() => {\n    let count = navItems.length;\n    if (showButton) {\n      if (primaryButton) count++;\n      if (secondaryButton) count++;\n    }\n\n    setMobileEntryVisible(count > 1);\n    count <= 1 && setMobileListVisible(false);\n  }, [primaryButton, secondaryButton, navItems, showButton]);\n\n  /** update logo mode start */\n  const handleImageAspectRatioUpdate = () => {\n    if (!logoRectRef.current) {\n      return;\n    }\n    const currentAspectRatio = LOGO_MAX_WIDTH / layoutObject.logoSize;\n    const { naturalWidth, naturalHeight } = logoRectRef.current;\n    const aspectRatio = naturalWidth / naturalHeight;\n    setIsOverWidthLogo(aspectRatio > currentAspectRatio);\n  };\n\n  React.useEffect(() => {\n    if (logoRectRef.current?.logo === logo) {\n      handleImageAspectRatioUpdate();\n      return;\n    }\n\n    const image = new Image();\n    image.onload = () => {\n      logoRectRef.current = {\n        logo,\n        naturalWidth: image.naturalWidth,\n        naturalHeight: image.naturalHeight,\n      };\n      handleImageAspectRatioUpdate();\n    };\n\n    image.src = logo;\n  }, [logo, layoutObject]);\n  /** update logo mode end */\n\n  const renderNavItem = (item, index) => {\n    return (\n      <EditableButton\n        key={item}\n        style={{ fontSize: layoutObject.fontSize }}\n        className={`${\n          index ? 'ml-8' : ''\n        } py-3 text-white whitespace-nowrap cursor-pointer duration-50 dark:text-white dark:hover:text-white/60  relative after:content-[''] after:absolute after:bottom-[11px] after:right-0 hover:after:left-0 after:h-[1px] after:bg-white after:max-w-96 after:w-0 hover:after:w-full after:transition-all after:duration-300`}\n      >\n        <EditableText propKey={`navItems_${index}`}>{item}</EditableText>\n      </EditableButton>\n    );\n  };\n\n  const renderMoreListItems = (items, startIndex = 0) => {\n    return items.map((item, index) => (\n      <EditableButton\n        key={item}\n        style={{\n          height: layoutObject.dropDownHeight,\n          paddingLeft: layoutObject.dropDownPaddingLeft,\n          paddingRight: layoutObject.dropDownPaddingRight,\n          fontSize: layoutObject.fontSize,\n        }}\n        className=\"flex-shrink-0 w-full h-full text-white whitespace-nowrap cursor-pointer text-left dark:text-white dark:hover:text-white/60 rounded-md hover:bg-[#ffffff0f] transition-colors\"\n        onClick={() => setMoreListVisible(false)}\n      >\n        <EditableText propKey={`navItems_${startIndex + index}`}>{item}</EditableText>\n      </EditableButton>\n    ));\n  };\n\n  const renderRest = (omittedItems) => (\n    <div className=\"relative ml-8 \">\n      <motion.button\n        ref={moreButtonRef}\n        className=\"w-10 h-10 flex items-center justify-center flex-shrink-0\"\n        onClick={() => setMoreListVisible(!moreListVisible)}\n        whileTap={{ scale: 0.9 }}\n        style={{ fontSize: layoutObject.fontSize }}\n      >\n        <svg\n          style={{ transform: 'translateY(2px)' }}\n          className=\"hover:transition-all hover:scale-110 text-white dark:text-black\"\n          width=\"20\"\n          height=\"20\"\n          viewBox=\"0 0 20 20\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <circle cx=\"3\" cy=\"10\" r=\"1.5\" fill=\"currentColor\" />\n          <circle cx=\"10\" cy=\"10\" r=\"1.5\" fill=\"currentColor\" />\n          <circle cx=\"17\" cy=\"10\" r=\"1.5\" fill=\"currentColor\" />\n        </svg>\n      </motion.button>\n      {moreListVisible && (\n        <AnimatePresence>\n          <motion.div\n            style={{\n              boxShadow: '0px 2px 4px 0px rgba(0, 0, 0, 0.06)',\n              fontSize: layoutObject.fontSize,\n            }}\n            className={`max-h-96 overflow-auto overscroll-contain absolute z-40 top-full right-0 flex flex-col p-1 rounded-md bg-[#000000C4]  border border-[#0000000a]`}\n            animate={{\n              scale: [0, 1],\n              opacity: [0, 1],\n            }}\n          >\n            {renderMoreListItems(omittedItems, navItems.length - omittedItems.length)}\n          </motion.div>\n        </AnimatePresence>\n      )}\n    </div>\n  );\n\n  const handleOverflowUpdate = (widths, overflow) => {\n    if (mobileMode) {\n      return;\n    }\n\n    if (widths.length >= 2) {\n      const firstItemWidth = widths[0];\n      const restItemWidth = overflow ? widths[widths.length - 1] : 72;\n      setMinPageWidth(firstItemWidth + restItemWidth);\n    } else if (navItems.length === 1 && widths.length && widths[0]) {\n      setMinPageWidth(widths[0]);\n    } else setMinPageWidth(MIN_PAGE_WIDTH);\n  };\n\n  const renderNavList = (items) => {\n    return (\n      <div\n        className={`${buttonVisible ? 'absolute' : 'flex flex-1 flex-shrink'} ${\n          center ? (buttonVisible ? 'left-1/2 -translate-x-1/2' : '') : leftLimit || minLimit ? `left-[${logoWidth + NAV_GAP}px]` : `right-[${buttonContainerWidth + NAV_GAP}px]`\n        } ${moreListVisible ? '' : 'overflow-hidden'}`}\n        style={{ width: buttonVisible ? pageWidth : undefined, minWidth: buttonVisible ? minPageWidth : undefined }}\n      >\n        <Overflow\n          data={items}\n          style={{ height: layoutObject.logoSize }}\n          className={`flex items-center ${buttonVisible ? 'justify-center' : 'justify-end'} flex-shrink flex-1`}\n          renderItem={renderNavItem}\n          maxCount={maxCount}\n          minCount={1}\n          renderRest={renderRest}\n          onUpdate={handleOverflowUpdate}\n        />\n      </div>\n    );\n  };\n\n  const handleMobileButtonClick = (e) => {\n    mobileListVisible && setMobileListVisible(false);\n  };\n\n  const renderContent = () => {\n    if (mobileMode) {\n      return (\n        <div className=\"flex flex-col h-full w-full\">\n          <div\n            className=\"relative flex flex-shrink-0 z-40 w-full pl-4  justify-between  items-center  overflow-hidden md:hidden\"\n            style={{\n              height: layoutObject.mobileNavHeight,\n              fontSize: layoutObject.mobileFontSize,\n            }}\n          >\n            <EditableImg\n              propKey=\"logo\"\n              style={{\n                height: isOverWidthLogo ? undefined : layoutObject.logoSize,\n              }}\n              className={`${isOverWidthLogo ? `!w-[${LOGO_MAX_WIDTH}px]` : `!w-auto`} !max-w-[${LOGO_MAX_WIDTH}px] object-cover flex-shrink min-w-0`}\n              src={logo}\n              alt=\"logo\"\n            />\n            <motion.button\n              className={`${!mobileEntryVisible ? 'hidden' : ''}  flex justify-center items-center text-white flex-shrink-0`}\n              onClick={() => setMobileListVisible(!mobileListVisible)}\n              whileTap={{ scale: 0.9 }}\n              style={{\n                width: layoutObject.mobileNavHeight,\n                height: layoutObject.mobileNavHeight,\n                fontSize: layoutObject.mobileFontSize,\n              }}\n            >\n              {mobileListVisible ? (\n                <svg width={layoutObject.mobileIconSize} height={layoutObject.mobileIconSize} viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M4 16L16 4.25115\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" />\n                  <path d=\"M4 4L16 15.7489\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" />\n                </svg>\n              ) : (\n                <svg width={layoutObject.mobileIconSize} height={layoutObject.mobileIconSize} viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M3 5L16.375 5\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" />\n                  <path d=\"M3 10H16.375\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" />\n                  <path d=\"M3 15H16.375\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" />\n                </svg>\n              )}\n            </motion.button>\n          </div>\n          {mobileListVisible && (\n            <div\n              ref={mobileListRef}\n              className=\"relative z-50 flex flex-grow flex-shrink flex-col rounded-b-3xl shadow-xl overflow-hidden md:hidden\"\n              style={{ fontSize: layoutObject.mobileFontSize }}\n            >\n              <motion.nav\n                className={`w-full h-full flex flex-col rounded-b-3xl`}\n                animate={{\n                  y: [20, 0],\n                  opacity: [0, 1],\n                }}\n                transition={{\n                  duration: 0.4,\n                }}\n              >\n                <div className=\"flex flex-col flex-grow flex-shrink overflow-auto overscroll-contain\">\n                  {navItems.map((item, navIndex) => (\n                    <EditableButton\n                      style={{\n                        height: layoutObject.mobileNavItemHeight,\n                        maxHeight: layoutObject.mobileNavItemHeight,\n                        fontSize: layoutObject.mobileFontSize,\n                      }}\n                      key={item}\n                      onClick={handleMobileButtonClick}\n                      className=\"w-full flex-grow-0 flex-shrink-0 text-white whitespace-nowrap cursor-pointer duration-50 dark:text-black dark:hover:text-black/60 select-none hover:bg-white/10 transition-colors\"\n                    >\n                      <EditableText propKey={`navItems_${navIndex}`}>{item}</EditableText>\n                    </EditableButton>\n                  ))}\n                </div>\n                <div className={`${showButton ? '' : 'hidden'} w-full h-fit flex-shrink-0 flex items-center justify-between overflow-hidden gap-5 px-5 py-[10px]`}>\n                  {secondaryButton && (\n                    <EditableButton\n                      onClick={handleMobileButtonClick}\n                      style={{\n                        height: layoutObject.mobileNavItemHeight,\n                        fontSize: layoutObject.mobileFontSize,\n                      }}\n                      className={`BTN-SECONDARY overflow-hidden px-10 flex-1 group/nav whitespace-nowrap font-normal text-white flex justify-center gap-2 items-center rounded-full hover:bg-white/10 hover:transition-all hover:duration-300`}\n                    >\n                      <EditableText className=\"overflow-hidden text-ellipsis\" propKey=\"secondaryButton_textAttr\">\n                        {secondaryButton.textAttr}\n                      </EditableText>\n                      <EditableIcon\n                        propKey=\"secondaryButton_icon\"\n                        icon={secondaryButton.icon}\n                        iconLibrary=\"FontAwesome\"\n                        className=\" text-white group-hover/nav:translate-x-1 transition-all\"\n                      />\n                    </EditableButton>\n                  )}\n                  {primaryButton && (\n                    <EditableButton\n                      onClick={handleMobileButtonClick}\n                      style={{\n                        height: layoutObject.mobileNavItemHeight,\n                        color: 'white',\n                        fontSize: layoutObject.mobileFontSize,\n                      }}\n                      className={`BTN-PRIMARY overflow-hidden px-10 flex-1 group/nav whitespace-nowrap font-normal flex justify-center gap-2 items-center rounded-full border border-white bg-white/0 hover:bg-white/10 hover:transition-all hover:duration-300`}\n                    >\n                      <EditableText className=\"overflow-hidden text-ellipsis\" propKey=\"primaryButton_textAttr\">\n                        {primaryButton.textAttr}\n                      </EditableText>\n                      <EditableIcon\n                        propKey=\"primaryButton_icon\"\n                        icon={primaryButton.icon}\n                        iconLibrary=\"FontAwesome\"\n                        style={{\n                          color: 'white',\n                        }}\n                        className=\" group-hover/nav:translate-x-1 transition-all\"\n                      />\n                    </EditableButton>\n                  )}\n                </div>\n              </motion.nav>\n            </div>\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <div\n        style={{\n          height: layoutObject.navHeight,\n        }}\n        className=\"relative w-full hidden gap-16 md:flex justify-between items-center\"\n      >\n        <div className={`w-fit h-full flex flex-shrink-0 items-center justify-start`} ref={logoRef} style={{ maxWidth: LOGO_MAX_WIDTH }}>\n          <EditableImg\n            propKey=\"logo\"\n            style={{\n              height: isOverWidthLogo ? undefined : layoutObject.logoSize,\n            }}\n            className={`${isOverWidthLogo ? `!w-[${LOGO_MAX_WIDTH}px]` : `!w-auto`} !max-w-[${LOGO_MAX_WIDTH}px] object-cover flex-shrink-0 min-w-0`}\n            src={logo}\n            alt=\"logo\"\n          />\n        </div>\n\n        {renderNavList(navItems)}\n        {buttonVisible && <div className=\"flex flex-shrink flex-1\" style={{ minWidth: leftLimit || rightLimit ? skeletonMinWidth : undefined }}></div>}\n\n        {buttonVisible && (\n          <div className={`w-fit h-full flex items-center justify-end overflow-hidden gap-3 ${minLimit ? 'flex-shrink' : 'flex-shrink-0'}`} ref={buttonContainerRef}>\n            {secondaryButton && (\n              <EditableButton\n                style={{\n                  height: layoutObject.buttonHeight,\n                  fontSize: layoutObject.fontSize,\n                }}\n                className={`BTN-SECONDARY max-w-[180px] w-fit px-5 group/nav whitespace-nowrap font-normal text-white flex gap-2 items-center rounded-full hover:bg-white/5 hover:transition-all hover:duration-300`}\n              >\n                <EditableText className=\"overflow-hidden text-ellipsis\" propKey=\"secondaryButton_textAttr\">\n                  {secondaryButton.textAttr}\n                </EditableText>\n                <EditableIcon\n                  propKey=\"secondaryButton_icon\"\n                  icon={secondaryButton.icon}\n                  iconLibrary=\"FontAwesome\"\n                  className=\"text-sm text-white group-hover/nav:translate-x-1 transition-all\"\n                />\n              </EditableButton>\n            )}\n            {primaryButton && (\n              <EditableButton\n                style={{\n                  height: layoutObject.buttonHeight,\n                  color: 'white',\n                  padding: `0 ${layoutObject.buttonPX}px`,\n                  fontSize: layoutObject.fontSize,\n                }}\n                className={`BTN-PRIMARY max-w-[180px] w-fit  group/nav whitespace-nowrap font-normal flex gap-2 items-center rounded-full border border-white bg-white/0 hover:bg-white/10 hover:transition-all hover:duration-300`}\n              >\n                <EditableText className=\"overflow-hidden text-ellipsis\" propKey=\"primaryButton_textAttr\">\n                  {primaryButton.textAttr}\n                </EditableText>\n                <EditableIcon\n                  propKey=\"primaryButton_icon\"\n                  icon={primaryButton.icon}\n                  iconLibrary=\"FontAwesome\"\n                  style={{\n                    color: 'white',\n                  }}\n                  className=\"text-sm group-hover/nav:translate-x-1 transition-all\"\n                />\n              </EditableButton>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <section\n      style={{\n        transitionTimingFunction: 'cubic-bezier(.165,.84,.44,1)',\n        transitionDuration: '300ms',\n        fontSize: layoutObject.fontSize,\n        height: mobileMode && mobileListVisible ? viewportHeight - 48 : 'auto',\n      }}\n      className={`fixed z-40 left-6 right-6 rounded-3xl outline-white/10 md:rounded-xl bg-black md:bg-[#000000C4] backdrop-blur-sm md:px-8 md:transition-all max-w-[1376px] m-auto ${\n        fixedTop || !hidden ? 'top-6' : 'top-[-130px]'\n      }`}\n    >\n      <div className=\"max-w-7xl mx-auto w-full h-full\" ref={contentRef}>\n        {renderContent()}\n      </div>\n    </section>\n  );\n}",
    "name": "Navigation_06",
    "props": {
        "fixedTop": false,
        "logo": "https://cdn.wegic.ai/assets/onepage/thread/icon/default.png",
        "logoSize": 40,
        "siteTitle": "专业团队官网",
        "navItems": [
            "text=首页&link=page-1",
            "text=服务&link=services",
            "text=关于我们&link=about-us"
        ],
        "showButton": true,
        "primaryButton": {
            "icon": "fa-solid fa-arrow-right",
            "textAttr": "text=联系我们",
            "textColor": "#000000"
        },
        "version": 3
    },
    "id": "V4Eo8VDUqEWwaOTOkY0wE"
}